// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  EHLION-MSI
// DateTime: 29/08/2016 16:38:23
// UserName: Ehlion
// Input file <DataParserGenerated.y - 29/08/2016 16:38:21>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using DataGenerator.Structure;
using System.Linq;

namespace DataGenerator
{
internal enum Tokens {
    error=97,EOF=98,LETTER=99,DIGIT=100,SPACE=101};

internal partial struct ValueType
#line 22 "DataParserGenerated.y"
       { public double dVal; 
         public char cVal; 
         public int iVal; 
		 public string sVal;
		 public DataTable dtVal;
		 public EnumTable entVal;
		 public DiceTable ditVal;
		 public RawAttribute rawDVal;
		 public RawType rawTVal;
		 public Cardinalite cardVal;
		 public Tuple<Cardinalite,Cardinalite> tcardVal;
		 public List<string> argsVal;}
#line default
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from DataParserGenerated.y - 29/08/2016 16:38:21
#line 2 "DataParserGenerated.y"
	StringBuilder textBuffer = new StringBuilder();
	
	List<RawAttribute> Attributs = new List<RawAttribute>();
	List<RawAttribute> modelAttributs = new List<RawAttribute>();
	List<RawAttribute> exemplarAttributs = new List<RawAttribute>();
	List<RawAttribute> descriptionAttributs = new List<RawAttribute>();
	
	List<RawTable> rawTables = new List<RawTable>();
	
	List<string> enumsListe = new List<string>();
	List<DiceFace> facesListe = new List<DiceFace>();
#line default
  // End verbatim content from DataParserGenerated.y - 29/08/2016 16:38:21

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[66];
  private static State[] states = new State[146];
  private static string[] nonTerms = new string[] {
      "description", "idName", "optionalIdName", "underscores", "targetAttribute", 
      "number", "declarationDataTable", "declarationEnumTable", "declarationDiceTable", 
      "declarationAttribut", "typeCall", "cardinalite", "optTypeCardinalite", 
      "optionalLabels", "labels", "spaces", "$accept", "change", "newSection", 
      "declarationDatabase", "allEnumTables", "allDiceTables", "allDataTables", 
      "databaseCall", "enumTableCall", "diceTableCall", "NoneOrOneOrMultipleAttributs", 
      "NoneOrMultipleSpecificAttributes", "NoneOrOneOrMultipleEnums", "NoneOrOneOrMultipleFaces", 
      "specificAttributes", "OneOrMultipleFaces", "OneOrMultipleEnums", "OneOrMultipleAttributs", 
      "declarationFace", };

  static Parser() {
    states[0] = new State(new int[]{99,70,98,-24,97,-24},new int[]{-1,1,-20,5,-24,142,-2,145});
    states[1] = new State(new int[]{98,2,97,3});
    states[2] = new State(-1);
    states[3] = new State(new int[]{10,4});
    states[4] = new State(-26);
    states[5] = new State(new int[]{101,23,37,-4},new int[]{-18,6,-16,21});
    states[6] = new State(new int[]{37,25},new int[]{-19,7});
    states[7] = new State(new int[]{101,23,99,-4,37,-4},new int[]{-18,8,-16,21});
    states[8] = new State(new int[]{99,70,101,-34,37,-34},new int[]{-21,9,-8,141,-25,123,-2,140});
    states[9] = new State(new int[]{101,23,37,-4,99,-4},new int[]{-18,10,-16,21});
    states[10] = new State(new int[]{37,25,99,70},new int[]{-19,11,-8,122,-25,123,-2,140});
    states[11] = new State(new int[]{101,23,99,-4,37,-4},new int[]{-18,12,-16,21});
    states[12] = new State(new int[]{99,70,101,-37,37,-37},new int[]{-22,13,-9,121,-26,100,-2,120});
    states[13] = new State(new int[]{101,23,37,-4,99,-4},new int[]{-18,14,-16,21});
    states[14] = new State(new int[]{37,25,99,70},new int[]{-19,15,-9,99,-26,100,-2,120});
    states[15] = new State(new int[]{101,23,99,-4,37,-4},new int[]{-18,16,-16,21});
    states[16] = new State(new int[]{99,70,101,-31,37,-31},new int[]{-23,17,-7,98,-2,27});
    states[17] = new State(new int[]{101,23,37,-4,99,-4},new int[]{-18,18,-16,21});
    states[18] = new State(new int[]{37,25,99,70},new int[]{-19,19,-7,24,-2,27});
    states[19] = new State(new int[]{101,23,98,-4,97,-4},new int[]{-18,20,-16,21});
    states[20] = new State(-25);
    states[21] = new State(new int[]{101,22,37,-5,99,-5,98,-5,97,-5,91,-5,40,-5,41,-5,58,-5,44,-5,93,-5,100,-5});
    states[22] = new State(-3);
    states[23] = new State(-2);
    states[24] = new State(-33);
    states[25] = new State(new int[]{37,26});
    states[26] = new State(-14);
    states[27] = new State(new int[]{99,65,101,23,95,68},new int[]{-16,28,-4,66});
    states[28] = new State(new int[]{101,22,99,70},new int[]{-2,29});
    states[29] = new State(new int[]{99,65,101,23,95,68,91,-4},new int[]{-18,30,-4,66,-16,21});
    states[30] = new State(new int[]{91,93,101,-18},new int[]{-3,31});
    states[31] = new State(new int[]{101,23},new int[]{-16,32});
    states[32] = new State(new int[]{101,22,99,70,40,-22},new int[]{-14,33,-15,89,-2,90});
    states[33] = new State(new int[]{101,23,40,-4},new int[]{-18,34,-16,21});
    states[34] = new State(new int[]{40,35});
    states[35] = new State(new int[]{101,23,99,-4,37,-4,41,-4},new int[]{-18,36,-16,21});
    states[36] = new State(new int[]{99,70,101,-51,37,-51,41,-51},new int[]{-27,37,-34,49,-10,86,-11,55,-2,78});
    states[37] = new State(new int[]{101,23,37,-4,41,-4},new int[]{-18,38,-16,21});
    states[38] = new State(new int[]{37,43,101,-43,41,-43},new int[]{-28,39,-31,88});
    states[39] = new State(new int[]{101,23,41,-4,37,-4},new int[]{-18,40,-16,21});
    states[40] = new State(new int[]{41,41,37,43},new int[]{-31,42});
    states[41] = new State(-40);
    states[42] = new State(-45);
    states[43] = new State(new int[]{99,70},new int[]{-2,44});
    states[44] = new State(new int[]{99,65,101,23,95,68,58,-4},new int[]{-18,45,-4,66,-16,21});
    states[45] = new State(new int[]{58,46});
    states[46] = new State(new int[]{101,23,99,-4,41,-4,37,-4},new int[]{-18,47,-16,21});
    states[47] = new State(new int[]{99,70,101,-51,41,-51,37,-51},new int[]{-27,48,-34,49,-10,86,-11,55,-2,78});
    states[48] = new State(-46);
    states[49] = new State(new int[]{101,23,37,-52,41,-52,44,-4},new int[]{-18,50,-16,21});
    states[50] = new State(new int[]{44,51});
    states[51] = new State(new int[]{101,23,99,-4},new int[]{-18,52,-16,21});
    states[52] = new State(new int[]{99,70},new int[]{-10,53,-11,55,-2,78});
    states[53] = new State(new int[]{101,23,44,-4,37,-4,41,-4},new int[]{-18,54,-16,21});
    states[54] = new State(-58);
    states[55] = new State(new int[]{101,23},new int[]{-16,56});
    states[56] = new State(new int[]{101,22,99,70},new int[]{-2,57});
    states[57] = new State(new int[]{99,65,101,23,95,68,91,-4,40,-4,44,-4,37,-4,41,-4},new int[]{-18,58,-4,66,-16,21});
    states[58] = new State(new int[]{91,71,101,-65,40,-65,44,-65,37,-65,41,-65},new int[]{-13,59});
    states[59] = new State(new int[]{101,23,40,-4,44,-4,37,-4,41,-4},new int[]{-18,60,-16,21});
    states[60] = new State(new int[]{40,62,101,-10,44,-10,37,-10,41,-10},new int[]{-5,61});
    states[61] = new State(-60);
    states[62] = new State(new int[]{99,70},new int[]{-2,63});
    states[63] = new State(new int[]{41,64,99,65,95,68},new int[]{-4,66});
    states[64] = new State(-11);
    states[65] = new State(-16);
    states[66] = new State(new int[]{99,70},new int[]{-2,67});
    states[67] = new State(new int[]{99,65,95,68,101,-17,91,-17,40,-17,58,-17,44,-17,37,-17,41,-17,93,-17},new int[]{-4,66});
    states[68] = new State(new int[]{95,68,99,-12},new int[]{-4,69});
    states[69] = new State(-13);
    states[70] = new State(-15);
    states[71] = new State(new int[]{100,76,42,77},new int[]{-12,72});
    states[72] = new State(new int[]{45,73});
    states[73] = new State(new int[]{100,76,42,77},new int[]{-12,74});
    states[74] = new State(new int[]{93,75});
    states[75] = new State(-64);
    states[76] = new State(-8);
    states[77] = new State(-9);
    states[78] = new State(new int[]{99,65,40,79,95,68,101,-61},new int[]{-4,66});
    states[79] = new State(new int[]{100,85,99,70},new int[]{-6,80,-2,83});
    states[80] = new State(new int[]{41,81,100,82});
    states[81] = new State(-62);
    states[82] = new State(-7);
    states[83] = new State(new int[]{41,84,99,65,95,68},new int[]{-4,66});
    states[84] = new State(-63);
    states[85] = new State(-6);
    states[86] = new State(new int[]{101,23,44,-4,37,-4,41,-4},new int[]{-18,87,-16,21});
    states[87] = new State(-57);
    states[88] = new State(-44);
    states[89] = new State(-23);
    states[90] = new State(new int[]{99,65,95,68,101,23,40,-20},new int[]{-4,66,-16,91});
    states[91] = new State(new int[]{101,22,99,70},new int[]{-15,92,-2,90});
    states[92] = new State(-21);
    states[93] = new State(new int[]{101,23,99,-4},new int[]{-18,94,-16,21});
    states[94] = new State(new int[]{99,70},new int[]{-2,95});
    states[95] = new State(new int[]{99,65,101,23,95,68,93,-4},new int[]{-18,96,-4,66,-16,21});
    states[96] = new State(new int[]{93,97});
    states[97] = new State(-19);
    states[98] = new State(-32);
    states[99] = new State(-39);
    states[100] = new State(new int[]{101,23},new int[]{-16,101});
    states[101] = new State(new int[]{101,22,99,70},new int[]{-2,102});
    states[102] = new State(new int[]{99,65,101,23,95,68,40,-4},new int[]{-18,103,-4,66,-16,21});
    states[103] = new State(new int[]{40,104});
    states[104] = new State(new int[]{101,23,100,-4,41,-4},new int[]{-18,105,-16,21});
    states[105] = new State(new int[]{100,85,101,-47,41,-47},new int[]{-30,106,-32,109,-35,118,-6,115});
    states[106] = new State(new int[]{101,23,41,-4},new int[]{-18,107,-16,21});
    states[107] = new State(new int[]{41,108});
    states[108] = new State(-42);
    states[109] = new State(new int[]{101,23,41,-48,44,-4},new int[]{-18,110,-16,21});
    states[110] = new State(new int[]{44,111});
    states[111] = new State(new int[]{101,23,100,-4},new int[]{-18,112,-16,21});
    states[112] = new State(new int[]{100,85},new int[]{-35,113,-6,115});
    states[113] = new State(new int[]{101,23,44,-4,41,-4},new int[]{-18,114,-16,21});
    states[114] = new State(-54);
    states[115] = new State(new int[]{100,82,101,23},new int[]{-16,116});
    states[116] = new State(new int[]{101,22,99,70},new int[]{-2,117});
    states[117] = new State(new int[]{99,65,95,68,101,-59,44,-59,41,-59},new int[]{-4,66});
    states[118] = new State(new int[]{101,23,44,-4,41,-4},new int[]{-18,119,-16,21});
    states[119] = new State(-53);
    states[120] = new State(new int[]{99,65,95,68,101,-30},new int[]{-4,66});
    states[121] = new State(-38);
    states[122] = new State(-36);
    states[123] = new State(new int[]{101,23},new int[]{-16,124});
    states[124] = new State(new int[]{101,22,99,70},new int[]{-2,125});
    states[125] = new State(new int[]{99,65,101,23,95,68,40,-4},new int[]{-18,126,-4,66,-16,21});
    states[126] = new State(new int[]{40,127});
    states[127] = new State(new int[]{101,23,99,-4,41,-4},new int[]{-18,128,-16,21});
    states[128] = new State(new int[]{99,70,101,-49,41,-49},new int[]{-29,129,-33,132,-2,138});
    states[129] = new State(new int[]{101,23,41,-4},new int[]{-18,130,-16,21});
    states[130] = new State(new int[]{41,131});
    states[131] = new State(-41);
    states[132] = new State(new int[]{101,23,41,-50,44,-4},new int[]{-18,133,-16,21});
    states[133] = new State(new int[]{44,134});
    states[134] = new State(new int[]{101,23,99,-4},new int[]{-18,135,-16,21});
    states[135] = new State(new int[]{99,70},new int[]{-2,136});
    states[136] = new State(new int[]{99,65,101,23,95,68,44,-4,41,-4},new int[]{-18,137,-4,66,-16,21});
    states[137] = new State(-56);
    states[138] = new State(new int[]{99,65,101,23,95,68,44,-4,41,-4},new int[]{-18,139,-4,66,-16,21});
    states[139] = new State(-55);
    states[140] = new State(new int[]{99,65,95,68,101,-29},new int[]{-4,66});
    states[141] = new State(-35);
    states[142] = new State(new int[]{101,23},new int[]{-16,143});
    states[143] = new State(new int[]{101,22,99,70},new int[]{-2,144});
    states[144] = new State(new int[]{99,65,95,68,101,-28,37,-28},new int[]{-4,66});
    states[145] = new State(new int[]{99,65,95,68,101,-27},new int[]{-4,66});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-17, new int[]{-1,98});
    rules[2] = new Rule(-16, new int[]{101});
    rules[3] = new Rule(-16, new int[]{-16,101});
    rules[4] = new Rule(-18, new int[]{});
    rules[5] = new Rule(-18, new int[]{-16});
    rules[6] = new Rule(-6, new int[]{100});
    rules[7] = new Rule(-6, new int[]{-6,100});
    rules[8] = new Rule(-12, new int[]{100});
    rules[9] = new Rule(-12, new int[]{42});
    rules[10] = new Rule(-5, new int[]{});
    rules[11] = new Rule(-5, new int[]{40,-2,41});
    rules[12] = new Rule(-4, new int[]{95});
    rules[13] = new Rule(-4, new int[]{95,-4});
    rules[14] = new Rule(-19, new int[]{37,37});
    rules[15] = new Rule(-2, new int[]{99});
    rules[16] = new Rule(-2, new int[]{-2,99});
    rules[17] = new Rule(-2, new int[]{-2,-4,-2});
    rules[18] = new Rule(-3, new int[]{});
    rules[19] = new Rule(-3, new int[]{91,-18,-2,-18,93});
    rules[20] = new Rule(-15, new int[]{-2});
    rules[21] = new Rule(-15, new int[]{-2,-16,-15});
    rules[22] = new Rule(-14, new int[]{});
    rules[23] = new Rule(-14, new int[]{-15});
    rules[24] = new Rule(-1, new int[]{});
    rules[25] = new Rule(-1, new int[]{-20,-18,-19,-18,-21,-18,-19,-18,-22,-18,-19,-18,-23,-18,-19,-18});
    rules[26] = new Rule(-1, new int[]{-1,97,10});
    rules[27] = new Rule(-24, new int[]{-2});
    rules[28] = new Rule(-20, new int[]{-24,-16,-2});
    rules[29] = new Rule(-25, new int[]{-2});
    rules[30] = new Rule(-26, new int[]{-2});
    rules[31] = new Rule(-23, new int[]{});
    rules[32] = new Rule(-23, new int[]{-7});
    rules[33] = new Rule(-23, new int[]{-23,-18,-7});
    rules[34] = new Rule(-21, new int[]{});
    rules[35] = new Rule(-21, new int[]{-8});
    rules[36] = new Rule(-21, new int[]{-21,-18,-8});
    rules[37] = new Rule(-22, new int[]{});
    rules[38] = new Rule(-22, new int[]{-9});
    rules[39] = new Rule(-22, new int[]{-22,-18,-9});
    rules[40] = new Rule(-7, new int[]{-2,-16,-2,-18,-3,-16,-14,-18,40,-18,-27,-18,-28,-18,41});
    rules[41] = new Rule(-8, new int[]{-25,-16,-2,-18,40,-18,-29,-18,41});
    rules[42] = new Rule(-9, new int[]{-26,-16,-2,-18,40,-18,-30,-18,41});
    rules[43] = new Rule(-28, new int[]{});
    rules[44] = new Rule(-28, new int[]{-31});
    rules[45] = new Rule(-28, new int[]{-28,-18,-31});
    rules[46] = new Rule(-31, new int[]{37,-2,-18,58,-18,-27});
    rules[47] = new Rule(-30, new int[]{});
    rules[48] = new Rule(-30, new int[]{-32});
    rules[49] = new Rule(-29, new int[]{});
    rules[50] = new Rule(-29, new int[]{-33});
    rules[51] = new Rule(-27, new int[]{});
    rules[52] = new Rule(-27, new int[]{-34});
    rules[53] = new Rule(-32, new int[]{-35,-18});
    rules[54] = new Rule(-32, new int[]{-32,-18,44,-18,-35,-18});
    rules[55] = new Rule(-33, new int[]{-2,-18});
    rules[56] = new Rule(-33, new int[]{-33,-18,44,-18,-2,-18});
    rules[57] = new Rule(-34, new int[]{-10,-18});
    rules[58] = new Rule(-34, new int[]{-34,-18,44,-18,-10,-18});
    rules[59] = new Rule(-35, new int[]{-6,-16,-2});
    rules[60] = new Rule(-10, new int[]{-11,-16,-2,-18,-13,-18,-5});
    rules[61] = new Rule(-11, new int[]{-2});
    rules[62] = new Rule(-11, new int[]{-2,40,-6,41});
    rules[63] = new Rule(-11, new int[]{-2,40,-2,41});
    rules[64] = new Rule(-13, new int[]{91,-12,45,-12,93});
    rules[65] = new Rule(-13, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 6: // number -> DIGIT
#line 63 "DataParserGenerated.y"
                     { CurrentSemanticValue.iVal = ValueStack[ValueStack.Depth-1].cVal; }
#line default
        break;
      case 7: // number -> number, DIGIT
#line 64 "DataParserGenerated.y"
                         { CurrentSemanticValue.iVal = ValueStack[ValueStack.Depth-2].iVal*10 + ValueStack[ValueStack.Depth-1].cVal; }
#line default
        break;
      case 8: // cardinalite -> DIGIT
#line 69 "DataParserGenerated.y"
  {
			switch((int)ValueStack[ValueStack.Depth-1].cVal){
				case 0:
					CurrentSemanticValue.cardVal = Cardinalite.Single;
					break;
				case 1:
					CurrentSemanticValue.cardVal = Cardinalite.Optional;
					break;
				default:
					CurrentSemanticValue.cardVal = Cardinalite.Single;
					Console.Error.WriteLine("Wrong cardinality "+ValueStack[ValueStack.Depth-1].cVal.ToString()+" replaced by Single Value.");
					break;
			}
		}
#line default
        break;
      case 9: // cardinalite -> '*'
#line 84 "DataParserGenerated.y"
  {
			CurrentSemanticValue.cardVal = Cardinalite.Many;
		}
#line default
        break;
      case 10: // targetAttribute -> /* empty */
#line 90 "DataParserGenerated.y"
             { CurrentSemanticValue.sVal =""; }
#line default
        break;
      case 11: // targetAttribute -> '(', idName, ')'
#line 92 "DataParserGenerated.y"
  {
			CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-2].sVal;
		}
#line default
        break;
      case 12: // underscores -> '_'
#line 98 "DataParserGenerated.y"
       { CurrentSemanticValue.sVal = "_";}
#line default
        break;
      case 13: // underscores -> '_', underscores
#line 99 "DataParserGenerated.y"
                   {CurrentSemanticValue.sVal = "_" + ValueStack[ValueStack.Depth-1].sVal;}
#line default
        break;
      case 15: // idName -> LETTER
#line 107 "DataParserGenerated.y"
            { CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal; }
#line default
        break;
      case 16: // idName -> idName, LETTER
#line 108 "DataParserGenerated.y"
                 { CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-2].sVal + ValueStack[ValueStack.Depth-1].sVal; }
#line default
        break;
      case 17: // idName -> idName, underscores, idName
#line 109 "DataParserGenerated.y"
                             {  CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-3].sVal + ValueStack[ValueStack.Depth-2].sVal + ValueStack[ValueStack.Depth-1].sVal; }
#line default
        break;
      case 18: // optionalIdName -> /* empty */
#line 113 "DataParserGenerated.y"
                  {CurrentSemanticValue.sVal = "";}
#line default
        break;
      case 19: // optionalIdName -> '[', change, idName, change, ']'
#line 114 "DataParserGenerated.y"
                                 {CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-3].sVal;}
#line default
        break;
      case 20: // labels -> idName
#line 118 "DataParserGenerated.y"
          { CurrentSemanticValue.argsVal = new List<string>(); CurrentSemanticValue.argsVal.Add(ValueStack[ValueStack.Depth-1].sVal); }
#line default
        break;
      case 21: // labels -> idName, spaces, labels
#line 119 "DataParserGenerated.y"
                        { ValueStack[ValueStack.Depth-1].argsVal.Add(ValueStack[ValueStack.Depth-3].sVal); CurrentSemanticValue.argsVal=ValueStack[ValueStack.Depth-1].argsVal }
#line default
        break;
      case 22: // optionalLabels -> /* empty */
#line 123 "DataParserGenerated.y"
            { CurrentSemanticValue.argsVal = new List<string>(); }
#line default
        break;
      case 23: // optionalLabels -> labels
#line 124 "DataParserGenerated.y"
          { CurrentSemanticValue.argsVal = ValueStack[ValueStack.Depth-1].argsVal; }
#line default
        break;
      case 25: // description -> declarationDatabase, change, newSection, change, allEnumTables, 
               //                change, newSection, change, allDiceTables, change, newSection, 
               //                change, allDataTables, change, newSection, change
#line 137 "DataParserGenerated.y"
   {
				ConstruireDataTables();
			}
#line default
        break;
      case 26: // description -> description, error, '\n'
#line 141 "DataParserGenerated.y"
   {
				yyerrok();
			}
#line default
        break;
      case 27: // databaseCall -> idName
#line 148 "DataParserGenerated.y"
  {
			if(ValueStack[ValueStack.Depth-1].sVal!="database")
				throw new LexiqueException("database",ValueStack[ValueStack.Depth-1].sVal);
		}
#line default
        break;
      case 28: // declarationDatabase -> databaseCall, spaces, idName
#line 154 "DataParserGenerated.y"
                              { Database = new Database(ValueStack[ValueStack.Depth-1].sVal); }
#line default
        break;
      case 29: // enumTableCall -> idName
#line 158 "DataParserGenerated.y"
          { if(ValueStack[ValueStack.Depth-1].sVal!="enumtable")
				throw new LexiqueException("enumtable",ValueStack[ValueStack.Depth-1].sVal); }
#line default
        break;
      case 30: // diceTableCall -> idName
#line 161 "DataParserGenerated.y"
          { if(ValueStack[ValueStack.Depth-1].sVal!="dicetable")
				throw new LexiqueException("dicetable",ValueStack[ValueStack.Depth-1].sVal); }
#line default
        break;
      case 35: // allEnumTables -> declarationEnumTable
#line 171 "DataParserGenerated.y"
                        { Database.AddEnumTable(ValueStack[ValueStack.Depth-1].entVal); }
#line default
        break;
      case 36: // allEnumTables -> allEnumTables, change, declarationEnumTable
#line 172 "DataParserGenerated.y"
                                             { Database.AddEnumTable(ValueStack[ValueStack.Depth-1].entVal); }
#line default
        break;
      case 38: // allDiceTables -> declarationDiceTable
#line 176 "DataParserGenerated.y"
                        { Database.AddDiceTable(ValueStack[ValueStack.Depth-1].ditVal); }
#line default
        break;
      case 39: // allDiceTables -> allDiceTables, change, declarationDiceTable
#line 177 "DataParserGenerated.y"
                                             { Database.AddDiceTable(ValueStack[ValueStack.Depth-1].ditVal); }
#line default
        break;
      case 40: // declarationDataTable -> idName, spaces, idName, change, optionalIdName, spaces, 
               //                         optionalLabels, change, '(', change, 
               //                         NoneOrOneOrMultipleAttributs, change, 
               //                         NoneOrMultipleSpecificAttributes, change, ')'
#line 185 "DataParserGenerated.y"
  {
			if(ValueStack[ValueStack.Depth-15].sVal == "datatable" || ValueStack[ValueStack.Depth-15].sVal == "structtable" ){
				RawTable rt = new RawTable(){
					Type = ValueStack[ValueStack.Depth-15].sVal,
					Name = ValueStack[ValueStack.Depth-13].sVal,
					ParentName = ValueStack[ValueStack.Depth-11].sVal
				};
				foreach(string lab in ValueStack[ValueStack.Depth-9].argsVal){
					if(lab.ToLower() == "abstract")
						rt.Abstract = true;
				}
				rt.defAtts.AddRange(Attributs);
				rt.modAtts.AddRange(modelAttributs);
				rt.desAtts.AddRange(descriptionAttributs);
				rt.exeAtts.AddRange(exemplarAttributs);
				Attributs.Clear();
				modelAttributs.Clear();
				descriptionAttributs.Clear();
				exemplarAttributs.Clear();
				rawTables.Add(rt);
			}else
				throw new LexiqueException("datatable or structtable",ValueStack[ValueStack.Depth-15].sVal);
		}
#line default
        break;
      case 41: // declarationEnumTable -> enumTableCall, spaces, idName, change, '(', change, 
               //                         NoneOrOneOrMultipleEnums, change, ')'
#line 213 "DataParserGenerated.y"
  {
			CurrentSemanticValue.entVal = new EnumTable(ValueStack[ValueStack.Depth-7].sVal);
			foreach(string att in enumsListe)
				CurrentSemanticValue.entVal.AddVal(att);
			enumsListe.Clear();
		}
#line default
        break;
      case 42: // declarationDiceTable -> diceTableCall, spaces, idName, change, '(', change, 
               //                         NoneOrOneOrMultipleFaces, change, ')'
#line 224 "DataParserGenerated.y"
  {
			CurrentSemanticValue.ditVal = new DiceTable(ValueStack[ValueStack.Depth-7].sVal);
			foreach(DiceFace att in facesListe)
				CurrentSemanticValue.ditVal.AddFace(att.Odd, att.Name);
			facesListe.Clear();
		}
#line default
        break;
      case 46: // specificAttributes -> '%', idName, change, ':', change, 
               //                       NoneOrOneOrMultipleAttributs
#line 239 "DataParserGenerated.y"
  {
			switch(ValueStack[ValueStack.Depth-5].sVal){
				case "model":
					modelAttributs.AddRange(Attributs);
				break;
				case "exemplar":
					exemplarAttributs.AddRange(Attributs);
				break;
				case "description":
					descriptionAttributs.AddRange(Attributs);
				break;
				default:
					throw new LexiqueException("model, exemplar or description", ValueStack[ValueStack.Depth-5].sVal);
			}
			Attributs.Clear();
		}
#line default
        break;
      case 53: // OneOrMultipleFaces -> declarationFace, change
#line 271 "DataParserGenerated.y"
                          {}
#line default
        break;
      case 54: // OneOrMultipleFaces -> OneOrMultipleFaces, change, ',', change, declarationFace, 
               //                       change
#line 272 "DataParserGenerated.y"
                                                              {}
#line default
        break;
      case 55: // OneOrMultipleEnums -> idName, change
#line 275 "DataParserGenerated.y"
                 { enumsListe.Add(ValueStack[ValueStack.Depth-2].sVal); }
#line default
        break;
      case 56: // OneOrMultipleEnums -> OneOrMultipleEnums, change, ',', change, idName, change
#line 276 "DataParserGenerated.y"
                                                     { enumsListe.Add(ValueStack[ValueStack.Depth-2].sVal); }
#line default
        break;
      case 57: // OneOrMultipleAttributs -> declarationAttribut, change
#line 279 "DataParserGenerated.y"
                              {}
#line default
        break;
      case 58: // OneOrMultipleAttributs -> OneOrMultipleAttributs, change, ',', change, 
               //                           declarationAttribut, change
#line 280 "DataParserGenerated.y"
                                                                      {}
#line default
        break;
      case 59: // declarationFace -> number, spaces, idName
#line 284 "DataParserGenerated.y"
                        { facesListe.Add(new DiceFace(){Odd = ValueStack[ValueStack.Depth-3].iVal, Name = ValueStack[ValueStack.Depth-1].sVal}); }
#line default
        break;
      case 60: // declarationAttribut -> typeCall, spaces, idName, change, optTypeCardinalite, 
               //                        change, targetAttribute
#line 288 "DataParserGenerated.y"
  {
			Attributs.Add(new RawAttribute(){
				Type = ValueStack[ValueStack.Depth-7].rawTVal,
				Name = ValueStack[ValueStack.Depth-5].sVal,
				CardMin = ValueStack[ValueStack.Depth-3].tcardVal.Item1,
				CardMax = ValueStack[ValueStack.Depth-3].tcardVal.Item2,
				RefAttributeName = ValueStack[ValueStack.Depth-1].sVal
			});
		}
#line default
        break;
      case 61: // typeCall -> idName
#line 301 "DataParserGenerated.y"
  { /* int, text, bool, double, decimal */
			CurrentSemanticValue.rawTVal = new RawType() {
				TypeName = ValueStack[ValueStack.Depth-1].sVal
			} ;
		}
#line default
        break;
      case 62: // typeCall -> idName, '(', number, ')'
#line 307 "DataParserGenerated.y"
  { /* varchar(X)*/
			CurrentSemanticValue.rawTVal = new RawType() {
				TypeName = ValueStack[ValueStack.Depth-4].sVal,
				Length = ValueStack[ValueStack.Depth-2].iVal
			} ;
		}
#line default
        break;
      case 63: // typeCall -> idName, '(', idName, ')'
#line 314 "DataParserGenerated.y"
  { /* enum(nameEnum), ref(nomTable), refex(nomtable) */
			CurrentSemanticValue.rawTVal = new RawType() {
				TypeName = ValueStack[ValueStack.Depth-4].sVal,
				Reference = ValueStack[ValueStack.Depth-2].sVal
			} ;
		}
#line default
        break;
      case 64: // optTypeCardinalite -> '[', cardinalite, '-', cardinalite, ']'
#line 324 "DataParserGenerated.y"
  {
			if ((int)ValueStack[ValueStack.Depth-4].cardVal > (int)ValueStack[ValueStack.Depth-2].cardVal ){
				Console.Error.WriteLine("Cardinalities misordered and swapped.");
				CurrentSemanticValue.tcardVal = new Tuple<Cardinalite,Cardinalite>(ValueStack[ValueStack.Depth-2].cardVal, ValueStack[ValueStack.Depth-4].cardVal);
			} else
				CurrentSemanticValue.tcardVal = new Tuple<Cardinalite,Cardinalite>(ValueStack[ValueStack.Depth-4].cardVal, ValueStack[ValueStack.Depth-2].cardVal);
		}
#line default
        break;
      case 65: // optTypeCardinalite -> /* empty */
#line 332 "DataParserGenerated.y"
  { CurrentSemanticValue.tcardVal = new Tuple<Cardinalite,Cardinalite>(Cardinalite.Single, Cardinalite.Single); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 336 "DataParserGenerated.y"
public DataTable FindExemplarDataTableByName(string name){
	return Database.ModelExemplarTables.Where(prop=>prop.Name == name).FirstOrDefault()?.ExemplarTable;
}
public DataTable FindModelDataTableByName(string name){
	return Database.DataTables.Where(prop=>prop.Name == name).FirstOrDefault()
		?? Database.ModelExemplarTables.Where(prop=>prop.Name == name).FirstOrDefault();
}
public EnumTable FindEnumTableByName(string name){
	EnumTable t = Database.EnumTables.Where(prop=>prop.Name == name).FirstOrDefault();
	if(t==null){
		throw new ReferenceException(name);
	}else{
		return t;
	}
}
#line default
}
}
