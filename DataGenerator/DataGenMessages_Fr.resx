<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ATT_ENUM_NOT_FOUND" xml:space="preserve">
    <value>Table {0} : Attribute {1} : Can't find Enum {2}</value>
    <comment>tableName, attributeName, referencedEnumName</comment>
  </data>
  <data name="ATT_FORBIDDEN_NAME" xml:space="preserve">
    <value>Table {0} : {1} is a forbidden name</value>
    <comment>tableName, attributeName</comment>
  </data>
  <data name="ATT_FOUND" xml:space="preserve">
    <value>Table {0} : Attribute {1} : {2} value is not expected but '{3}' was found</value>
    <comment>tableName, attributeName, attributeTypeName, foundValue</comment>
  </data>
  <data name="ATT_NOT_FOUND" xml:space="preserve">
    <value>Table {0} : Attribute {1} : {2} value is expected but not found</value>
    <comment>tableName, attributeName, attributeTypeName</comment>
  </data>
  <data name="ATT_NO_NAME" xml:space="preserve">
    <value>Table {0} : Attribute without name</value>
    <comment>tableName</comment>
  </data>
  <data name="ATT_REFEX_TO_STRUCT_ERROR" xml:space="preserve">
    <value>Table {0} : Attribute {1} : A Refex can't reference a struct</value>
    <comment>tableName, attributeName</comment>
  </data>
  <data name="ATT_REF_NOT_FOUND" xml:space="preserve">
    <value>Table {0} : Attribute {1} : Can't find the attribute {2} of table {3}</value>
    <comment>tableName, attributeName, referencedTableName, referencedRefName</comment>
  </data>
  <data name="ATT_REF_NOT_REF" xml:space="preserve">
    <value>Table {0} : Attribute {1} : expected the attribute {2} of table {3} to be a reference</value>
    <comment>tableName, attributeName, referencedTableName, referencedRefName</comment>
  </data>
  <data name="ATT_TABLE_NOT_FOUND" xml:space="preserve">
    <value>Table {0} : Attribute {1} : Can't find Table {2}</value>
    <comment>tableName, attributeName, referencedRefName</comment>
  </data>
  <data name="ATT_UNKNOWN_TYPE" xml:space="preserve">
    <value>Table {0} : Attribute {1} : {2} value is unknown type</value>
    <comment>tableName, attributeName, attributeValue</comment>
  </data>
  <data name="ATT_UNKNOWN_VALUE" xml:space="preserve">
    <value>Table {0} : Attribute {1} : {2} value is unknown</value>
    <comment>tableName, attributeName, attributeValue</comment>
  </data>
  <data name="ATT_VAL_NOT_INT" xml:space="preserve">
    <value>Table {0} : Attribute {1} : {2} value is expected to be an Integer</value>
    <comment>tableName, attributeName, attributeValue</comment>
  </data>
  <data name="ENTITY_UNKNOWN_TAG" xml:space="preserve">
    <value>Entity '{0}' doesn't exists</value>
    <comment>entityName</comment>
  </data>
  <data name="ERR_DUPLICATE" xml:space="preserve">
    <value>{0} : The name {1} has been found twice</value>
    <comment>contextName, duplicateName</comment>
  </data>
  <data name="GEN_REL_TYPES" xml:space="preserve">
    <value>Table {0} : Attribute {1} : Type {2} and Type {3} are incompatible</value>
    <comment>tableName, attributeName, type1Name, type2Name</comment>
  </data>
  <data name="NO_TAGS_EXPECTED" xml:space="preserve">
    <value>Table {0} didn't expect any tag</value>
    <comment>tableName</comment>
  </data>
  <data name="TABLE_DUPLICATE_NAME" xml:space="preserve">
    <value>Table {0} : Name is already used</value>
    <comment>tableName</comment>
  </data>
  <data name="TABLE_FORBIDDEN_NAME" xml:space="preserve">
    <value>Table {0} is a forbidden name</value>
    <comment>tableName</comment>
  </data>
  <data name="TABLE_MAJOR_TAG_FOUND" xml:space="preserve">
    <value>Table {0} : Musn't have a Major Tag</value>
    <comment>tableName</comment>
  </data>
  <data name="TABLE_NOT_FOUND" xml:space="preserve">
    <value>Table {0} : Can't find table {1}</value>
    <comment>tableName, expectedTableName</comment>
  </data>
  <data name="TABLE_NO_NAME" xml:space="preserve">
    <value>Table without Name has been found</value>
    <comment>_</comment>
  </data>
  <data name="TAG_DUPLICATE" xml:space="preserve">
    <value>Table {0} : tag {1} is duplicated</value>
    <comment>tableName, tagName</comment>
  </data>
  <data name="TAG_FORBIDDEN" xml:space="preserve">
    <value>Table {0} : tag {2} is forbidden for tables of type {2}</value>
    <comment>tableName, tagName, tableTypeName</comment>
  </data>
  <data name="UNKNOWN_SECTION" xml:space="preserve">
    <value>Table {0} : Section {1} is unknown</value>
    <comment>tableName, sectionName</comment>
  </data>
</root>