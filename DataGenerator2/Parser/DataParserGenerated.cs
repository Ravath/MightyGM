// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  EHLION-MSI
// DateTime: 02/12/2016 18:21:00
// UserName: Ehlion
// Input file <DataParserGenerated.y - 02/12/2016 18:20:57>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Linq;

namespace DataGenerator2.Parser {
internal enum Tokens {
    error=97,EOF=98,LETTER=99,SPACE=100};

internal partial struct ValueType
#line 21 "DataParserGenerated.y"
       { public double dVal; 
         public char cVal; 
         public int iVal; 
		 public string sVal;}
#line default
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from DataParserGenerated.y - 02/12/2016 18:20:57
#line 10 "DataParserGenerated.y"
	string section;
	RawAttribute curAtt = new RawAttribute();
	RawTable curTable = new RawTable();
#line default
  // End verbatim content from DataParserGenerated.y - 02/12/2016 18:20:57

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[52];
  private static State[] states = new State[124];
  private static string[] nonTerms = new string[] {
      "MAIN", "idName", "underscores", "cardSymbol", "$accept", "declarationDatabase", 
      "change", "newSection", "allDataTables", "spaces", "databaseCall", "tableType", 
      "tableName", "tags", "minorTags", "majorTag", "cardinalite", "targetAttribute", 
      "sectionName", "cardinaliteAndTargetAttribute", "attributeDef", "attribute", 
      "oneOrMultipleAttributes", "section", "allAttributesSection", "changeTable", 
      "declarationDataTable", };

  static Parser() {
    states[0] = new State(new int[]{99,58,98,-2,97,-2},new int[]{-1,1,-6,5,-11,120,-2,123});
    states[1] = new State(new int[]{98,2,97,3});
    states[2] = new State(-1);
    states[3] = new State(new int[]{10,4});
    states[4] = new State(-4);
    states[5] = new State(new int[]{100,16,37,-7},new int[]{-7,6,-10,14});
    states[6] = new State(new int[]{37,116},new int[]{-8,7});
    states[7] = new State(new int[]{100,16,37,-7,99,-7,98,-7,97,-7},new int[]{-7,8,-10,14});
    states[8] = new State(new int[]{100,16,37,-48,99,-7,98,-48,97,-48},new int[]{-9,9,-27,119,-12,17,-7,114,-10,14});
    states[9] = new State(new int[]{100,16,98,-3,97,-3,37,-7,99,-7},new int[]{-26,10,-7,118,-10,14});
    states[10] = new State(new int[]{100,16,37,116,99,-7},new int[]{-27,11,-8,12,-12,17,-7,114,-10,14});
    states[11] = new State(-50);
    states[12] = new State(new int[]{100,16,37,-7,99,-7},new int[]{-7,13,-10,14});
    states[13] = new State(-47);
    states[14] = new State(new int[]{100,15,37,-8,99,-8,98,-8,97,-8,91,-8,38,-8,40,-8,41,-8,44,-8,45,-8,42,-8,58,-8,93,-8});
    states[15] = new State(-6);
    states[16] = new State(-5);
    states[17] = new State(new int[]{100,16},new int[]{-10,18});
    states[18] = new State(new int[]{100,111,99,-7},new int[]{-13,19,-7,112,-10,14});
    states[19] = new State(new int[]{100,16,91,-7,38,-7,40,-7},new int[]{-7,20,-10,14});
    states[20] = new State(new int[]{91,106,100,-26,38,-26,40,-26},new int[]{-16,21});
    states[21] = new State(new int[]{100,16,38,-7,40,-7},new int[]{-7,22,-10,14});
    states[22] = new State(new int[]{38,96,100,-23,40,-23},new int[]{-15,23});
    states[23] = new State(new int[]{100,16,40,-7},new int[]{-7,24,-10,14});
    states[24] = new State(new int[]{40,25});
    states[25] = new State(new int[]{100,16,37,-7,99,-7,41,-7},new int[]{-7,26,-10,14});
    states[26] = new State(new int[]{100,16,37,86,99,58,41,-7},new int[]{-25,27,-7,93,-10,14,-24,94,-19,32,-23,91,-22,84,-21,40,-2,71});
    states[27] = new State(new int[]{100,16,41,-7,37,-7,99,-7},new int[]{-7,28,-10,14});
    states[28] = new State(new int[]{41,29,37,86,99,58},new int[]{-24,30,-19,32,-23,91,-22,84,-21,40,-2,71});
    states[29] = new State(-51);
    states[30] = new State(new int[]{100,16,41,-7,37,-7,99,-7},new int[]{-7,31,-10,14});
    states[31] = new State(-45);
    states[32] = new State(new int[]{100,16,99,-7,41,-7,37,-7},new int[]{-7,33,-10,14});
    states[33] = new State(new int[]{99,58,100,-40,41,-40,37,-40},new int[]{-23,34,-22,84,-21,40,-2,71});
    states[34] = new State(new int[]{100,16,44,-7,41,-7,37,-7,99,-7},new int[]{-7,35,-10,14});
    states[35] = new State(new int[]{44,36,100,-42,41,-42,37,-42,99,-42});
    states[36] = new State(new int[]{100,16,99,-7},new int[]{-7,37,-10,14});
    states[37] = new State(new int[]{99,58},new int[]{-22,38,-21,40,-2,71});
    states[38] = new State(new int[]{100,16,44,-7,41,-7,37,-7,99,-7},new int[]{-7,39,-10,14});
    states[39] = new State(-39);
    states[40] = new State(new int[]{100,16,40,-7,91,-7,44,-7,41,-7,37,-7,99,-7},new int[]{-7,41,-10,14});
    states[41] = new State(new int[]{100,16,40,48,44,-36,41,-36,37,-36,99,-36,91,-7},new int[]{-20,42,-17,44,-7,59,-10,14,-18,69});
    states[42] = new State(new int[]{100,16,44,-7,41,-7,37,-7,99,-7},new int[]{-7,43,-10,14});
    states[43] = new State(-37);
    states[44] = new State(new int[]{100,16,40,-7,44,-7,41,-7,37,-7,99,-7},new int[]{-7,45,-10,14});
    states[45] = new State(new int[]{40,48,100,-31,44,-31,41,-31,37,-31,99,-31},new int[]{-18,46});
    states[46] = new State(new int[]{100,16,44,-7,41,-7,37,-7,99,-7},new int[]{-7,47,-10,14});
    states[47] = new State(-30);
    states[48] = new State(new int[]{100,16,99,-7},new int[]{-7,49,-10,14});
    states[49] = new State(new int[]{99,58},new int[]{-2,50});
    states[50] = new State(new int[]{99,53,100,16,95,56,41,-7},new int[]{-7,51,-3,54,-10,14});
    states[51] = new State(new int[]{41,52});
    states[52] = new State(-28);
    states[53] = new State(-13);
    states[54] = new State(new int[]{99,58},new int[]{-2,55});
    states[55] = new State(new int[]{99,53,95,56,100,-14,40,-14,91,-14,44,-14,41,-14,37,-14,58,-14,93,-14,38,-14},new int[]{-3,54});
    states[56] = new State(new int[]{95,56,99,-9},new int[]{-3,57});
    states[57] = new State(-10);
    states[58] = new State(-12);
    states[59] = new State(new int[]{91,60});
    states[60] = new State(new int[]{99,67,42,68},new int[]{-4,61});
    states[61] = new State(new int[]{100,16,45,-7},new int[]{-7,62,-10,14});
    states[62] = new State(new int[]{45,63});
    states[63] = new State(new int[]{100,16,99,-7,42,-7},new int[]{-7,64,-10,14});
    states[64] = new State(new int[]{99,67,42,68},new int[]{-4,65});
    states[65] = new State(new int[]{93,66});
    states[66] = new State(-27);
    states[67] = new State(-15);
    states[68] = new State(-16);
    states[69] = new State(new int[]{100,16,44,-7,41,-7,37,-7,99,-7},new int[]{-7,70,-10,14});
    states[70] = new State(-32);
    states[71] = new State(new int[]{99,53,100,16,95,56,40,-7,91,-7,44,-7,41,-7,37,-7},new int[]{-7,72,-3,54,-10,81});
    states[72] = new State(new int[]{40,73,100,-33,91,-33,44,-33,41,-33,37,-33,99,-33});
    states[73] = new State(new int[]{100,16,99,-7},new int[]{-7,74,-10,14});
    states[74] = new State(new int[]{99,58},new int[]{-2,75});
    states[75] = new State(new int[]{99,53,100,16,95,56,41,-7},new int[]{-7,76,-3,54,-10,14});
    states[76] = new State(new int[]{41,77});
    states[77] = new State(new int[]{100,16,99,-7},new int[]{-7,78,-10,14});
    states[78] = new State(new int[]{99,58},new int[]{-2,79});
    states[79] = new State(new int[]{99,53,100,16,95,56,40,-7,91,-7,44,-7,41,-7,37,-7},new int[]{-7,80,-3,54,-10,14});
    states[80] = new State(-35);
    states[81] = new State(new int[]{100,15,99,58,40,-8,91,-8,44,-8,41,-8,37,-8},new int[]{-2,82});
    states[82] = new State(new int[]{99,53,100,16,95,56,40,-7,91,-7,44,-7,41,-7,37,-7},new int[]{-7,83,-3,54,-10,14});
    states[83] = new State(-34);
    states[84] = new State(new int[]{100,16,44,-7,41,-7,37,-7,99,-7},new int[]{-7,85,-10,14});
    states[85] = new State(-38);
    states[86] = new State(new int[]{100,16,99,-7},new int[]{-7,87,-10,14});
    states[87] = new State(new int[]{99,58},new int[]{-2,88});
    states[88] = new State(new int[]{99,53,100,16,95,56,58,-7},new int[]{-7,89,-3,54,-10,14});
    states[89] = new State(new int[]{58,90});
    states[90] = new State(-29);
    states[91] = new State(new int[]{100,16,44,-7,41,-7,37,-7,99,-7},new int[]{-7,92,-10,14});
    states[92] = new State(new int[]{44,36,100,-41,41,-41,37,-41,99,-41});
    states[93] = new State(-43);
    states[94] = new State(new int[]{100,16,41,-7,37,-7,99,-7},new int[]{-7,95,-10,14});
    states[95] = new State(-44);
    states[96] = new State(new int[]{91,97});
    states[97] = new State(new int[]{100,16,99,-7},new int[]{-7,98,-10,14});
    states[98] = new State(new int[]{99,58},new int[]{-14,99,-2,105});
    states[99] = new State(new int[]{100,16,93,-7,44,-7},new int[]{-7,100,-10,14});
    states[100] = new State(new int[]{93,101,44,102});
    states[101] = new State(-24);
    states[102] = new State(new int[]{100,16,99,-7},new int[]{-7,103,-10,14});
    states[103] = new State(new int[]{99,58},new int[]{-2,104});
    states[104] = new State(new int[]{99,53,95,56,100,-22,93,-22,44,-22},new int[]{-3,54});
    states[105] = new State(new int[]{99,53,95,56,100,-21,93,-21,44,-21},new int[]{-3,54});
    states[106] = new State(new int[]{100,16,99,-7},new int[]{-7,107,-10,14});
    states[107] = new State(new int[]{99,58},new int[]{-2,108});
    states[108] = new State(new int[]{99,53,100,16,95,56,93,-7},new int[]{-7,109,-3,54,-10,14});
    states[109] = new State(new int[]{93,110});
    states[110] = new State(-25);
    states[111] = new State(-5);
    states[112] = new State(new int[]{99,58},new int[]{-2,113});
    states[113] = new State(new int[]{99,53,95,56,100,-20,91,-20,38,-20,40,-20},new int[]{-3,54});
    states[114] = new State(new int[]{99,58},new int[]{-2,115});
    states[115] = new State(new int[]{99,53,95,56,100,-19},new int[]{-3,54});
    states[116] = new State(new int[]{37,117});
    states[117] = new State(-11);
    states[118] = new State(-46);
    states[119] = new State(-49);
    states[120] = new State(new int[]{100,16},new int[]{-10,121});
    states[121] = new State(new int[]{100,15,99,58},new int[]{-2,122});
    states[122] = new State(new int[]{99,53,95,56,100,-18,37,-18},new int[]{-3,54});
    states[123] = new State(new int[]{99,53,95,56,100,-17},new int[]{-3,54});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-5, new int[]{-1,98});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-6,-7,-8,-7,-9});
    rules[4] = new Rule(-1, new int[]{-1,97,10});
    rules[5] = new Rule(-10, new int[]{100});
    rules[6] = new Rule(-10, new int[]{-10,100});
    rules[7] = new Rule(-7, new int[]{});
    rules[8] = new Rule(-7, new int[]{-10});
    rules[9] = new Rule(-3, new int[]{95});
    rules[10] = new Rule(-3, new int[]{95,-3});
    rules[11] = new Rule(-8, new int[]{37,37});
    rules[12] = new Rule(-2, new int[]{99});
    rules[13] = new Rule(-2, new int[]{-2,99});
    rules[14] = new Rule(-2, new int[]{-2,-3,-2});
    rules[15] = new Rule(-4, new int[]{99});
    rules[16] = new Rule(-4, new int[]{42});
    rules[17] = new Rule(-11, new int[]{-2});
    rules[18] = new Rule(-6, new int[]{-11,-10,-2});
    rules[19] = new Rule(-12, new int[]{-7,-2});
    rules[20] = new Rule(-13, new int[]{-7,-2});
    rules[21] = new Rule(-14, new int[]{-2});
    rules[22] = new Rule(-14, new int[]{-14,-7,44,-7,-2});
    rules[23] = new Rule(-15, new int[]{});
    rules[24] = new Rule(-15, new int[]{38,91,-7,-14,-7,93});
    rules[25] = new Rule(-16, new int[]{91,-7,-2,-7,93});
    rules[26] = new Rule(-16, new int[]{});
    rules[27] = new Rule(-17, new int[]{-7,91,-4,-7,45,-7,-4,93});
    rules[28] = new Rule(-18, new int[]{40,-7,-2,-7,41});
    rules[29] = new Rule(-19, new int[]{37,-7,-2,-7,58});
    rules[30] = new Rule(-20, new int[]{-17,-7,-18,-7});
    rules[31] = new Rule(-20, new int[]{-17,-7});
    rules[32] = new Rule(-20, new int[]{-18,-7});
    rules[33] = new Rule(-21, new int[]{-2,-7});
    rules[34] = new Rule(-21, new int[]{-2,-10,-2,-7});
    rules[35] = new Rule(-21, new int[]{-2,-7,40,-7,-2,-7,41,-7,-2,-7});
    rules[36] = new Rule(-22, new int[]{-21,-7});
    rules[37] = new Rule(-22, new int[]{-21,-7,-20,-7});
    rules[38] = new Rule(-23, new int[]{-22,-7});
    rules[39] = new Rule(-23, new int[]{-23,-7,44,-7,-22,-7});
    rules[40] = new Rule(-24, new int[]{-19,-7});
    rules[41] = new Rule(-24, new int[]{-23,-7});
    rules[42] = new Rule(-24, new int[]{-19,-7,-23,-7});
    rules[43] = new Rule(-25, new int[]{-7});
    rules[44] = new Rule(-25, new int[]{-24,-7});
    rules[45] = new Rule(-25, new int[]{-25,-7,-24,-7});
    rules[46] = new Rule(-26, new int[]{-7});
    rules[47] = new Rule(-26, new int[]{-26,-8,-7});
    rules[48] = new Rule(-9, new int[]{});
    rules[49] = new Rule(-9, new int[]{-27});
    rules[50] = new Rule(-9, new int[]{-9,-26,-27});
    rules[51] = new Rule(-27, new int[]{-12,-10,-13,-7,-16,-7,-15,-7,40,-7,-25,-7,41});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 3: // MAIN -> declarationDatabase, change, newSection, change, allDataTables
#line 39 "DataParserGenerated.y"
   {
				
			}
#line default
        break;
      case 4: // MAIN -> MAIN, error, '\n'
#line 43 "DataParserGenerated.y"
   {
				yyerrok();
			}
#line default
        break;
      case 9: // underscores -> '_'
#line 57 "DataParserGenerated.y"
       { CurrentSemanticValue.sVal = "_";}
#line default
        break;
      case 10: // underscores -> '_', underscores
#line 58 "DataParserGenerated.y"
                   {CurrentSemanticValue.sVal = "_" + ValueStack[ValueStack.Depth-1].sVal;}
#line default
        break;
      case 12: // idName -> LETTER
#line 64 "DataParserGenerated.y"
            { CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal; }
#line default
        break;
      case 13: // idName -> idName, LETTER
#line 65 "DataParserGenerated.y"
                 { CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-2].sVal + ValueStack[ValueStack.Depth-1].sVal; }
#line default
        break;
      case 14: // idName -> idName, underscores, idName
#line 66 "DataParserGenerated.y"
                             {  CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-3].sVal + ValueStack[ValueStack.Depth-2].sVal + ValueStack[ValueStack.Depth-1].sVal; }
#line default
        break;
      case 15: // cardSymbol -> LETTER
#line 69 "DataParserGenerated.y"
          { CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal; }
#line default
        break;
      case 16: // cardSymbol -> '*'
#line 70 "DataParserGenerated.y"
       { CurrentSemanticValue.sVal = "*"; }
#line default
        break;
      case 17: // databaseCall -> idName
#line 75 "DataParserGenerated.y"
  {
			if(ValueStack[ValueStack.Depth-1].sVal!="database")
				throw new ParserException("Received "+ValueStack[ValueStack.Depth-1].sVal+ " but `database` was expected");
		}
#line default
        break;
      case 18: // declarationDatabase -> databaseCall, spaces, idName
#line 81 "DataParserGenerated.y"
                              { RawData.DatabaseName = ValueStack[ValueStack.Depth-1].sVal; }
#line default
        break;
      case 19: // tableType -> change, idName
#line 85 "DataParserGenerated.y"
                 { curTable.Type = ValueStack[ValueStack.Depth-1].sVal; }
#line default
        break;
      case 20: // tableName -> change, idName
#line 88 "DataParserGenerated.y"
                 { curTable.Name = ValueStack[ValueStack.Depth-1].sVal; }
#line default
        break;
      case 21: // tags -> idName
#line 91 "DataParserGenerated.y"
          { curTable.MinorTags.Add(ValueStack[ValueStack.Depth-1].sVal); }
#line default
        break;
      case 22: // tags -> tags, change, ',', change, idName
#line 92 "DataParserGenerated.y"
                                 { curTable.MinorTags.Add(ValueStack[ValueStack.Depth-1].sVal); }
#line default
        break;
      case 25: // majorTag -> '[', change, idName, change, ']'
#line 99 "DataParserGenerated.y"
                                { curTable.MajorTag = ValueStack[ValueStack.Depth-3].sVal; }
#line default
        break;
      case 27: // cardinalite -> change, '[', cardSymbol, change, '-', change, cardSymbol, ']'
#line 105 "DataParserGenerated.y"
  {
			curAtt.CardMin = ValueStack[ValueStack.Depth-6].sVal;
			curAtt.CardMax = ValueStack[ValueStack.Depth-2].sVal;
		}
#line default
        break;
      case 28: // targetAttribute -> '(', change, idName, change, ')'
#line 111 "DataParserGenerated.y"
                                { curAtt.Target = ValueStack[ValueStack.Depth-3].sVal; }
#line default
        break;
      case 29: // sectionName -> '%', change, idName, change, ':'
#line 114 "DataParserGenerated.y"
                                { section = ValueStack[ValueStack.Depth-3].sVal; }
#line default
        break;
      case 33: // attributeDef -> idName, change
#line 127 "DataParserGenerated.y"
                 { curAtt.Name = ValueStack[ValueStack.Depth-2].sVal; }
#line default
        break;
      case 34: // attributeDef -> idName, spaces, idName, change
#line 128 "DataParserGenerated.y"
                                { curAtt.Type = ValueStack[ValueStack.Depth-4].sVal; curAtt.Name = ValueStack[ValueStack.Depth-2].sVal; }
#line default
        break;
      case 35: // attributeDef -> idName, change, '(', change, idName, change, ')', change, 
               //                 idName, change
#line 129 "DataParserGenerated.y"
                                                                    { curAtt.Type = ValueStack[ValueStack.Depth-10].sVal; curAtt.TypeTag = ValueStack[ValueStack.Depth-6].sVal; curAtt.Name = ValueStack[ValueStack.Depth-2].sVal; }
#line default
        break;
      case 38: // oneOrMultipleAttributes -> attribute, change
#line 157 "DataParserGenerated.y"
                     { curAtt.Section = section; curTable.Attributes.Add(curAtt); curAtt = new RawAttribute(); }
#line default
        break;
      case 39: // oneOrMultipleAttributes -> oneOrMultipleAttributes, change, ',', change, 
               //                            attribute, change
#line 158 "DataParserGenerated.y"
                                                               { curAtt.Section = section; curTable.Attributes.Add(curAtt); curAtt = new RawAttribute(); }
#line default
        break;
      case 49: // allDataTables -> declarationDataTable
#line 177 "DataParserGenerated.y"
                        { RawData.RawTables.Add(curTable); curTable = new RawTable(); section = ""; }
#line default
        break;
      case 50: // allDataTables -> allDataTables, changeTable, declarationDataTable
#line 178 "DataParserGenerated.y"
                                                  { RawData.RawTables.Add(curTable); curTable = new RawTable(); section = "";  }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
